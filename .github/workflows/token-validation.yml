name: Token Validation & Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  validate-tokens:
    name: Validate Design Tokens
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build tokens from source
        run: npm run build:tokens
        
      - name: Validate token alignment
        run: npm run validate-tokens
        
      - name: Check for hardcoded values
        run: npm run scan:hardcoded -- --fail-on-errors
        continue-on-error: true # Don't fail build yet, just report
        
      - name: Run ESLint token checks
        run: npm run lint:tokens -- --max-warnings 0
        
      - name: Generate coverage report
        run: npm run report:coverage
        
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: token-coverage-report
          path: reports/
          
  component-quality:
    name: Component Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check Storybook build
        run: npm run build-storybook
        
      - name: Run component tests
        run: npm test -- --passWithNoTests
        
      - name: Generate component health report
        run: npm run report:all
        
      - name: Comment PR with metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('reports/component-inventory.json', 'utf8'));
            
            const comment = `## ðŸ“Š Design System Health Report
            
            **Overall Health Score:** ${report.overallHealth}%
            
            | Metric | Value | Target |
            |--------|-------|--------|
            | Components | ${report.totalComponents} | - |
            | Storybook Coverage | ${report.storybookCoverage}% | 100% |
            | Test Coverage | ${report.testCoverage}% | 80% |
            | Token Adoption | ${report.tokenAdoption}% | 100% |
            | Hardcoded Values | ${report.hardcodedValues} | 0 |
            
            <details>
            <summary>View detailed report</summary>
            
            \`\`\`json
            ${JSON.stringify(report.summary, null, 2)}
            \`\`\`
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });